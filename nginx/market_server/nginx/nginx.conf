user  nginx;
worker_processes  auto;
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    server_tokens off;

    # >>> BACKEND CONFIG PLACEHOLDER
    # You can control the number of backend instances with environment variables.
    # Supported env format (examples):
    #   MARKET_BACKEND_COUNT=3
    #   MARKET_BACKEND_URL_1=market1:5001
    #   MARKET_BACKEND_URL_2=market2:5002
    #   MARKET_BACKEND_URL_3=market3:5003
    # If MARKET_BACKEND_COUNT is set, the entrypoint script will read that many
    # MARKET_BACKEND_URL_i variables. If not set, the entrypoint will scan up to
    # 20 variables MARKET_BACKEND_URL_1..MARKET_BACKEND_URL_20 and use any found.
    # As a fallback you can also set a single variable:
    #   MARKET_BACKEND_URL=market1:5001
    # The entrypoint will generate the upstream block automatically at container start.

    upstream server_backend {
        least_conn;
        # Placeholder servers (will be replaced/augmented by the entrypoint):
        server ${MARKET_BACKEND_URL_1};
        server ${MARKET_BACKEND_URL_2};
        server ${MARKET_BACKEND_URL_3};
        # ... additional MARKET_BACKEND_URL_i entries will be inserted when present
    }
    # <<< BACKEND CONFIG PLACEHOLDER

    server {
        listen 5000;
        server_name _;

        # CORS settings
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type,Accept,Origin,X-Requested-With' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;

        location / {
            if ($request_method = 'OPTIONS' ) {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type,Accept,Origin,X-Requested-With' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            proxy_pass https://server_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            proxy_read_timeout 90;
            proxy_connect_timeout 90;
            proxy_send_timeout 90;
            proxy_buffering off;
            proxy_request_buffering off;
            proxy_redirect off;
        }

        access_log  /var/log/nginx/market_access.log;
        error_log   /var/log/nginx/market_error.log;
    }
}
